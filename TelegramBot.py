from config import TELEGRAM_BOT_TOKEN, tags, times, main_menu
import logging
import telegram
import time
import schedule
from feedHandler import get_timed_digest, get_immediately_digest
from telegram.ext import Updater
from telegram.ext import CommandHandler
from telegram.ext import MessageHandler, Filters, PicklePersistence
from utils import divide_chunks
from datetime import time

my_persistence = PicklePersistence(filename='bot_persistence.pickle')
updater = Updater(token=TELEGRAM_BOT_TOKEN, persistence=my_persistence,use_context=True)
j = updater.job_queue

dispatcher = updater.dispatcher

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                     level=logging.INFO)






def timed_digest_sender(context: telegram.ext.CallbackContext):
    chat_id = context.job.context[0]
    user_data = context.job.context[1]
    digest = get_timed_digest(user_data['categories'], user_data['time'])
    for item in digest:
       context.bot.send_message(chat_id=chat_id, text="{}\n{}".format(item['title'],item['link']))

def digest_timer(update: telegram.Update, context: telegram.ext.CallbackContext):
    setted_time = context.user_data['time']
    context.job_queue.run_daily(timed_digest_sender, time = time(int(setted_time[:2]), int(setted_time[3:])) , context=[update.message.chat_id,context.user_data])
    context.bot.send_message(chat_id=update.message.chat_id, 
                text="üôå –í–∏ —â–æ–π–Ω–æ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç—É!")






def categories_handler(update, context):
    if update.message.text in tags:
        context.user_data['categories'].add(update.message.text)
        context.bot.send_message(chat_id=update.message.chat_id, 
        text="<b>–í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:</b>\n‚úÖ {}. \n‚åö –ù–∞–ª–∞—à—Ç—É–π—Ç–µ —á–∞—Å, –∫–æ–ª–∏ –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç.".format(',\n‚úÖ '.join(context.user_data['categories'])),
        parse_mode=telegram.ParseMode.HTML)

def time_handler(update, context):
    context.user_data['time'] = update.message.text
    context.bot.send_message(chat_id=update.message.chat_id, 
        text="<b>–í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:</b>\n‚úÖ {}. \n‚åö –ß–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–π–¥–∂–µ—Å—Ç—É: {}\nüöÄ <b>–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç—É:</b> /launch. ".format(',\n‚úÖ '.join(context.user_data['categories']),context.user_data['time']),
        parse_mode=telegram.ParseMode.HTML)







def start(update, context):

    context.user_data['categories']= set()
    user = update.message.from_user.first_name
    reply_markup = telegram.ReplyKeyboardMarkup(main_menu)
    context.bot.send_message(chat_id=update.message.chat_id, 
                 text="–ü—Ä–∏–≤—ñ—Ç, <b>{}</b>!\n–Ø <i>–¥–∞–π–¥–∂–µ—Å—Ç-–±–æ—Ç</i> 6262.com.ua! \n‚Ä¢ –û–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–æ–≤–∏–Ω, —è–∫—ñ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–ª—è—Ç—å —Ç–∞ —á–∞—Å, –∫–æ–ª–∏ —Ö–æ—á–µ—à —ó—Ö –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏! \n‚Ä¢ –©–æ–± –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–æ–º–∞–Ω–¥—É /reset".format(user), 
                 parse_mode=telegram.ParseMode.HTML,
                 reply_markup=reply_markup)

def reset(update, context):
        context.user_data.clear()

def stop(update, context):
        context.job_queue.stop()
        context.bot.send_message(chat_id=update.message.chat_id, 
                text="üò¢ –í–∏ –±—ñ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç")
    

def echo(update, context):
    if update.message.text == 'üìÜ –û—Ç—Ä–∏–º–∞—Ç–∏ –º–∏—Ç—Ç—î–≤—ñ –Ω–æ–≤–∏–Ω–∏ –∑–∞ –¥–æ–±—É':
        digest = get_immediately_digest()
        for item in digest:
            context.bot.send_message(chat_id=update.message.chat_id, 
                text="{}\n{}".format(item['title'],item['link']))

    if update.message.text == '‚óÄ –ù–∞–∑–∞–¥':
        custom_keyboard = divide_chunks(main_menu,2)
        reply_markup = telegram.ReplyKeyboardMarkup(main_menu)
        context.bot.send_message(chat_id=update.message.chat_id, 
                 text="–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", 
                 reply_markup=reply_markup)

        
    if update.message.text =='üìå –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó':
        custom_keyboard = divide_chunks(tags, 2)
        reply_markup = telegram.ReplyKeyboardMarkup(custom_keyboard)
        context.bot.send_message(chat_id=update.message.chat_id, 
                 text="–û–±–∏—Ä–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–æ–≤–∏–Ω", 
                 reply_markup=reply_markup)


    if update.message.text =='üïì –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —á–∞—Å':
        custom_keyboard = divide_chunks(times, 2)
        reply_markup = telegram.ReplyKeyboardMarkup(custom_keyboard)
        context.bot.send_message(chat_id=update.message.chat_id, 
                 text="–û–±–µ—Ä—ñ—Ç—å —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–π–¥–∂–µ—Å—Ç—É", 
                 reply_markup=reply_markup)
    

    if update.message.text =='üîß –ú–æ—ó –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è':
        if len(context.user_data['categories'])>0 and context.user_data.get('time') is not None:
            context.bot.send_message(chat_id=update.message.chat_id, 
                text="<b>–í–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:</b>\n‚úÖ {}. \n‚åö –ß–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–π–¥–∂–µ—Å—Ç—É: {}. \n‚Ä¢ –ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è /reset\n üö´ <b>–ü—Ä–∏–ø–∏–Ω–∏—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —â–æ–¥–µ–Ω–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç—É:</b> /stop".format(',\n‚úÖ '.join(context.user_data['categories']),context.user_data['time']),
                parse_mode=telegram.ParseMode.HTML)
        else:
            context.bot.send_message(chat_id=update.message.chat_id, 
                text="‚ö†\n–í–∏ —â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–ª–∏ –¥–∞–π–¥–∂–µ—Å—Ç")

    if update.message.text in tags and update.message.text!= '‚óÄ –ù–∞–∑–∞–¥':
        categories_handler(update, context)

    if update.message.text in times and update.message.text!= '‚óÄ –ù–∞–∑–∞–¥':
        time_handler(update, context)

    print(context.user_data)


    



    
    #     context.user_data['categories'].add(update.message.text)
    #     context.bot.send_message(chat_id=update.message.chat_id, 
    #         text="–í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:\n‚úÖ {}. \n‚åö –í–≤–µ–¥—ñ—Ç—å —á–∞—Å, –∫–æ–ª–∏ –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –¥–∞–π–¥–∂–µ—Å—Ç —â–æ–¥–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 08:30 –∞–±–æ 21:00 —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –ó–∞–≤–µ—Ä—à–∏—Ç–∏".format(',\n‚úÖ '.join(context.user_data['categories'])))
    
  


reset_handler  = CommandHandler('reset', start)
dispatcher.add_handler(reset_handler)


start_handler = CommandHandler('start', start)
dispatcher.add_handler(start_handler)

stop_handler = CommandHandler('stop', stop)
dispatcher.add_handler(stop_handler)

echo_handler = MessageHandler(Filters.text, echo)
dispatcher.add_handler(echo_handler)

timer_handler = CommandHandler('launch', digest_timer)
dispatcher.add_handler(timer_handler)


updater.start_polling()
